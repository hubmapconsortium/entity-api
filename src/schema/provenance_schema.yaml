############################################# Rules #############################################
# type: data type of the property, one of the following: string|integer|boolean|list|json_string
# generated:whether the property is auto genearated or user provided, default to false
# required_on_create: whether the property is required from user reqeust JSON for entity creation via POST
# immutable: whether the property can be updated or not once after created, default to false
# transient: whether the property to persist in database or not, default to false
# exposed: whether the property gets returned to the user or not, default to true
# trigger types: before_create_trigger|after_create_trigger|before_update_trigger|after_update_trigger|on_read_trigger, one property can have none (default) or more than one triggers

# Entity creation via http POST request, either standalone or derived:
# - Use `generated: true` to mark a property as to be auto generated by the program instead of from request JSON
# - If a property is marked as `generated: true`, there must be a `before_create_trigger` to generate the value
# - If a property has `before_create_trigger`, it can't be specified in client request JSON
# - If a property is mraked as `generated: true`, it can't be `required_on_create: true` at the same time
# - Use `required_on_create: true` to mark a property as required from user input
# - If a property is marked as `required_on_create: true`, it can't be `generated: true` and must not have trigger at the same time
# - If a property is marked as `generated: true`, user input can't contain this property in request json since it'll be auto generated

# Entity update via http PUT request:
# - By default, all entity properties as mutable (can be updated). Use `immutable: true` to mark a property as immutable

# Entity retrival via http GET request:
# - By default, all entity properties will be returned. Use `exposed: false` to filter out the property from response
# - If a property has `on_read_trigger`, it must be transient, meaning it's not stored in neo4j and only available during response


############################################# Attention #############################################
# Properties that are still stored in neo4j but no longer needed: protocol_file, protocol_info


############################################# Schema #############################################
# Shared properties across ACTIVITIES and ENTITIES
shared_properties: &shared_properties
  ###### Creation info properties ######
  created_timestamp:
    type: integer
    generated: true # Disallow user input from request json when being created
    immutable: true # Disallow update of this property when the entity is being updated
    description: "The timestamp of when the node was created.  The format is an integer representing milliseconds since midnight Jan 1, 1970"
    before_create_trigger: set_timestamp
  created_by_user_displayname:
    type: string
    generated: true
    immutable: true
    description: "The name of the person or process authenticated when creating the object"
    before_create_trigger: set_user_displayname
  created_by_user_email:
    type: string
    generated: true
    immutable: true
    description: "The email address of the person or process authenticated when creating the object."
    before_create_trigger: set_user_email
  created_by_user_sub:
    type: string
    generated: true
    immutable: true
    description: "The subject id as provided by the authorization mechanism for the person or process authenticated when creating the object."
    before_create_trigger: set_user_sub
  ###### ID properties ######
  uuid:
    type: string
    generated: true
    immutable: true
    description: "The HuBMAP unique identifier, intended for internal software use only.  This is a 32 digit hexadecimal uuid e.g. 461bbfdc353a2673e381f632510b0f17"
    before_create_trigger: set_uuid
  hubmap_id:
    type: string
    generated: true
    immutable: true
    description: "E.g., HBM###.XXXX.###.  A HuBMAP specific id "
    before_create_trigger: set_hubmap_id


####################################################################################################
## Activities
####################################################################################################

ACTIVITIES:
  Activity:
    properties:
      <<: *shared_properties
      creation_action:
        type: string
        generated: true
        immutable: true
        description: "The activity that was performed."
        before_create_trigger: set_activity_creation_action


####################################################################################################
## Entities
####################################################################################################

shared_entity_properties: &shared_entity_properties 
  ###### DOI properties ######
  registered_doi:
    type: string
    immutable: true
    description: "The doi of the registered entity. e.g. 10.35079/hbm289.pcbm.487"
  doi_url:
    type: string
    immutable: true
    description: "The url from the doi registry for this entity. e.g. https://doi.org/10.35079/hbm289.pcbm.487"
  ###### Last Modified Properties #######
  last_modified_timestamp:
    type: integer
    generated: true
    description: "The timestamp of when the object was last modified.  The format is an integer representing milliseconds since midnight, Jan 1, 1970"
    before_update_trigger: set_timestamp
  last_modified_user_sub:
    type: string
    generated: true
    description: "The subject id as provided by the authorization mechanism for the person or process authenticated when the object was modified."
    before_update_trigger: set_user_sub
  last_modified_user_email:
    type: string
    generated: true
    description: "The email address of the person or process authenticated when the object was last modified."
    before_update_trigger: set_user_email
  last_modified_user_displayname:
    type: string
    generated: true
    description: "The name of the person or process authenticated when the object was last modified."
    before_update_trigger: set_user_displayname
  ###### Shared transient properties ######
  data_access_level:
    type: string
    generated: true
    transient: true # Caculate this instead of storing in neo4j
    description: "One of the values: public, consortium, protected. Only Dataset may have protected value"
    on_read_trigger: get_data_access_level
  ###### All other shared properties ######
  entity_class:
    type: string
    generated: true
    immutable: true
    description: "One of the normalized entity types: Dataset, Collection, Sample, Donor"
    before_create_trigger: set_entity_class 
  # Currently cretors and contacts are only available for Collection
  creators:
    type: list
    description: "A list of the people who created the entity with full name, email, ORCID iD, institution, etc.. This is analogus to the author list on a publication."
  contacts:
    type: list 
    description: "A list of the people who are the main contacts to get information about the entity."
  # To-DO
  # creator_ids:
  #   type: list
  #   immutable: true
  #   description: "A list of ids (will need to decide on uuid or orcid id) referencing the people who created the entity"
  # contact_ids:
  #   type: list
  #   description: "A list of ids (will need to decide on uuid or orcid id) referencing the people who are the main contacts about this entity"
  

ENTITIES:
  ############################################# Collection #############################################
  Collection:
    # Collection can not be derivation source but not target
    derivation:
      source: false
      target: false
    properties:
      <<: *shared_properties
      <<: *shared_entity_properties
      title:
        type: string
        required_on_create: true # Only required for create via POST, not update via PUT
      has_doi:
        type: boolean
        description: "True if the entity has a doi registered for it, false otherwise."
      ###### Transient properties ######
      # Should we make dataset_uuids `immutable: true` to disallow update?
      dataset_uuids:  #used only to pass the reference to linked datasets in on a PUT/POST 
        type: list
        transient: true
        exposed: false
        description: "A list of dataset uuids that belong to this collection.  This field is used to pass the set of datasets contained in the collection in on a PUT or POST"
        after_create_trigger: link_collection_to_datasets
        after_update_trigger: relink_collection_to_datasets
        on_read_trigger: get_collection_dataset_uuids
      datasets:
        type: list
        transient: true
        generated: true
        description: "The datasets that are contained in the collection."
        on_read_trigger: get_collection_datasets

  ############################################# Dataset #############################################
  Dataset:
    # Dataset can be either derivation source or target
    derivation:
      source: true
      target: true
    properties:
      <<: *shared_properties
      <<: *shared_entity_properties
      title:
        type: string
        required_on_create: true # Only required for create via POST, not update via PUT
        description: "The dataset title."
      data_types:
        type: json_string
        required_on_create: true # Only required for create via POST, not update via PUT
        description: "The data or assay types contained in this dataset as a json array of strings.  Each is an assay code from https://github.com/hubmapconsortium/search-api/blob/devel/src/search-schema/data/definitions/enums/assay_types.yaml."
      # Should we make collection_uuids `immutable: true` to disallow update?
      collection_uuids:
        type: list
        transient: true
        exposed: false
        description: "A list of collection uuids for the collections that this dataset belongs to. This is used to pass the reference"
        after_create_trigger: link_dataset_to_collections
        after_update_trigger: relink_dataset_to_collections
        on_read_trigger: get_dataset_collection_uuids
      collections:
        type: list
        transient: true
        generated: true
        description: "A list of collections that this dataset belongs to. Will be returned in response"
        on_read_trigger: get_dataset_collections
      # Do we want to expose direct_ancestor_uuids and direct_ancestors at the same time?
      # Should we make direct_ancestor_uuids `immutable: true` to disallow update?
      direct_ancestor_uuids:
        required_on_create: true # Only required for create via POST, not update via PUT
        type: list
        transient: true
        exposed: false
        description: "The uuids of source entities from which this new entity is derived.  Used to pass source entity ids in on POST or PUT calls used to create the linkages."
        on_read_trigger: get_dataset_direct_ancestor_uuids
        after_create_trigger: link_dataset_to_direct_ancestors
        after_update_trigger: relink_dataset_to_direct_ancestors
      direct_ancestors:
        type: list
        generated: true
        transient: true
        on_read_trigger: get_dataset_direct_ancestors
      published_timestamp:
        type: integer
        immutable: true
        generated: true
        description: "The timestamp of when the dataset was published.  The format is an integer representing milliseconds since midnight, Jan 1, 1970.  Cannot be set directly must be set with the /datasets/<id>/publish method."
        before_create_trigger: set_timestamp
      published_user_displayname:
        type: string
        generated: true
        immutable: true
        description: "The name of the authenticated user or process that published the data.  Cannot be set directly must be set with the /datasets/<id>/publish method."
        before_create_trigger: set_user_displayname
      published_user_sub:
        type: string
        generated: true
        immutable: true
        description: "The subject id as provided by the authorization mechanism for the person or process authenticated when the dataset was publised.  Cannot be set directly must be set with the /datasets/<id>/publish method."
        before_create_trigger: set_user_sub
      published_user_email:
        type: string
        generated: true
        immutable: true
        description: "The email address provided by the authorization mechanism for the person or process authenticated when published.  Cannot be set directly must be set with the /datasets/<id>/publish method."
        before_create_trigger: set_user_email
      pipeline_message:
        #todo: where is this attribute sourced from?  Is it stored in the database? <- Not in neo4j
        type: string
      # The Dataset.data_access_level is based on Dataset.status and Dataset.contains_human_genetic_sequences
      contains_human_genetic_sequences:
        type: boolean
        required_on_create: true # Only required for create via POST, not update via PUT
        description: "True if the data contains any human genetic sequence information."
      ingest_metadata:
        type: json_string
        description: "The metadata returned from the processing at data submission time."
      local_directory_rel_path:
        # Example: protected/<TMC>/<uuid>
        # Refer to the globus-url call
        type: string
        generated: true
        transient: true
        description: "The path on the local file system, relative to the base data directory, where the data is stored."
        on_read_trigger: get_local_directory_rel_path
      # The Dataset.data_access_level is based on Dataset.status and Dataset.contains_human_genetic_sequences
      status:
        type: string
        immutable: true
        description: "The status of the dataset one of Published|New|QA|Error|Hold|Invalid. Cannot be set directly must be set with a PUT /datasets/<id>/<status> method."
      run_id:
        type: string
      ingest_id:
        type: string
      # Must set in neo4j
      group_uuid:
        type: string
        generated: true
        immutable: true
        description: "The uuid of globus group which the user who created this entity is a member of"
        before_create_trigger: set_group_uuid #method that, if group_uuid is not already set looks for membership in a single "data provider" group and sets to that. Otherwise if not set and no single "provider group" membership throws error
      # Must set in neo4j
      group_name:
        # It's not being mapped in the current version, what to do for the existing entities?
        type: string
        generated: true
        immutable: true
        description: "The displayname of globus group which the user who created this entity is a member of"
        before_create_trigger: set_group_name #same as group_uuid, except set group_name


  ############################################# Donor #############################################
  Donor:
    # Donor can be derivation source but not target
    derivation:
      source: false
      target: true
    properties:
      <<: *shared_properties
      <<: *shared_entity_properties
      # Need `title` property?
      # Deidentified Name?- we're using label (definition below).  For now...
      image_file_metadata:
        type: json_string
        description: "List of uploaded image files and descriptions of the files."
        #todo: migrate to new attribute set as above portal_metadata_upload files
      metadata:
        type: json_string
        description: "Donor metadata coded as described here: <get donor metadata doc from Chuck>"
      protocol_url:
        type: string
        required_on_create: true # Only required for create via POST, not update via PUT
        description: "The protocols.io doi url pointing the protocol describing the donor selection, inclusion/exclusion criteria"
      lab_donor_id:
        type: string
        description: "A lab specific identifier for the donor."
      # Will come back from uuid-api together with the uuid and hubmap_id
      submission_id:
        type: string
        immutable: true
        generated: true
        description: "The hubmap internal id with embedded semantic information e.g.: VAN0003.  This id is generated at creation time which tracks the lab, donor, organ and sample hierarchy per the following: https://docs.google.com/document/d/1DjHgmqWF1VA5-3mfzLFNfabbzmc8KLSG9xWx1DDLlzo/edit?usp=sharing"
        before_create_trigger: set_submission_id
      # Must set in neo4j
      group_uuid:
        type: string
        generated: true 
        immutable: true
        description: "The uuid of globus group which the user who created this entity is a member of"
        before_create_trigger: set_group_uuid #method that, if group_uuid is not already set looks for membership in a single "data provider" group and sets to that. Otherwise if not set and no single "provider group" membership throws error.  This field is also used to link (Neo4j relationship) to the correct Lab node on creation.
      # Must set in neo4j
      group_name:
        type: string
        generated: true
        immutable: true
        description: "The displayname of globus group which the user who created this entity is a member of"
        before_create_trigger: set_group_name
        #todo: map to provenance_group_name in ES - ? In the current version it's not mapped
      portal_metadata_upload_files:
        type: json_string
        description: "list of relative paths to metadata files"
        #todo: migrate to new attribute (set, maybe) representing a single uploaded sample_metadata.tsv file using the now file upload methods.  Leave this in place for now, but add new attribute(s) to support new methon.  Need to do a design session.
      next_identifier:
        type: string
        immutable: true
        exposed: false
        description: "Internal count of child samples, used for generating the submission id of the children. This field is not exposed via the api."
        #todo: add new yaml attribute, exposed that defaults to true.  When false the attribute is not returned in ws response
      label:
        type: string
        description: "Lab provided, de-identified name for the donor"
      open_consent:
        type: boolean
        descrption: "True if the donor was consented to allow public, open access to any data, identified or not, derived from the donor's tissue.  Otherwise false."


  ############################################# Sample #############################################
  Sample:
    # Sample can be either derivation source or target
    derivation:
      source: true
      target: true
    properties:
      <<: *shared_properties
      <<: *shared_entity_properties
      specimen_type:
        type: string
        required_on_create: true # Only required for create via POST, not update via PUT
        description: "A code representing the type of specimen.  Must be one of the codes specified in: https://github.com/hubmapconsortium/search-api/blob/devel/src/search-schema/data/definitions/enums/tissue_sample_types.yaml"
      portal_metadata_upload_files:
        type: json_string
        description: "A list of relative paths to metadata files"
        #todo: migrate to new attribute (set, maybe) representing a single uploaded sample_metadata.tsv file using the now file upload methods.  Leave this in place for now, but add new attribute(s) to support new methon.  Need to do a design session.
      protocol_url:
        type: string
        required_on_create: true
        description: "The protocols.io doi url pointing the protocol under wich the sample was obtained and/or prepared."
      image_file_metadata:
        #todo: migrate to new attribute set as above portal_metadata_upload files
        type: json_string
        description: "A list of uploaded image files and descriptions of the files."
      # Must set in neo4j
      group_uuid:
        type: string
        generated: true
        immutable: true
        description: "The uuid of globus group which the user who created this entity is a member of"
        before_create_trigger: set_group_uuid #method that, if group_uuid is not already set looks for membership in a single "data provider" group and sets to that. Otherwise if not set and no single "provider group" membership throws error.  This field is also used to link (Neo4j relationship) to the correct Lab node on creation.
      # Must set in neo4j
      group_name:
        type: string
        generated: true
        immutable: true
        description: "The displayname of globus group which the user who created this entity is a member of"
        before_create_trigger: set_group_name
      sample_count:
        type: string
      organ_other:
        type: string
        description: The organ type provided by the user if "other" organ type is selected
      # Do we want to expose direct_ancestor_uuid and direct_ancestor at the same time?
      # Should we make direct_ancestor_uuid `immutable: true` to disallow update?
      direct_ancestor_uuid:
        type: string
        transient: true
        exposed: false
        description: "The uuid of source entity from which this new entity is derived from. Used on creation or edit to create an action and relationship to the ancestor"
        after_create_trigger: link_sample_to_direct_ancestor
        after_update_trigger: relink_sample_to_direct_ancestor
        on_read_trigger: get_sample_direct_ancestor_uuid
      direct_ancestor:
        type: json_string
        generated: true
        transient: true
        on_read_trigger: get_sample_direct_ancestor
      # No submission_id for Dataset nor Collection
      # Only Donor and Sample have this property
      submission_id:
        type: string
        generated: true
        immutable: true
        description: "The hubmap internal id with embedded semantic information e.g.: VAN0003-LK-1-10.  This id is generated at creation time which tracks the lab, donor, organ and sample hierarchy per the following: https://docs.google.com/document/d/1DjHgmqWF1VA5-3mfzLFNfabbzmc8KLSG9xWx1DDLlzo/edit?usp=sharing"
        before_create_trigger: set_submission_id
      organ:
        type: string
        description: "Organ code specifier, only set if sample_type == organ.  Valid values found in: https://github.com/hubmapconsortium/search-api/blob/devel/src/search-schema/data/definitions/enums/organ_types.yaml"
      lab_tissue_sample_id:
        type: string
        description: "Lab specific id for the sample."
      next_identifier:
        type: string
        immutable: true
        exposed: false # For internal use only
        description: "Internal count of child samples, used for generating the submission id of the children. This field is not exposed via the api."
        #todo: add new yaml attribute, exposed that defaults to true.  When false the attribute is not returned in ws response
      metadata:
        type: json_string
        description: "The sample specific metadata derived from the uploaded sample_metadata.tsv file"
      rui_location:
        type: json_string
        description: "The sample location and orientation in the ancestor organ as specified in the RUI tool."
      specimen_type_other:
        type: string
        description: "The user provided sample type if the 'other' sample_type is chosen."
      visit:
        type: string
        description: "The visit id for the donor/patient when the sample was obtained."

