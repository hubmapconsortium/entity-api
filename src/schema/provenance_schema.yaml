############################################# Rules #############################################
# type: data type of the property, one of the following: string|integer|boolean|list|json_string
# generated: whether the property is auto genearated or user provided, default to false
# required_on_create: whether the property is required from user reqeust JSON for entity creation via POST
# immutable: whether the property can NOT be updated once being created, default to false
# transient: whether the property to persist in database or not, default to false
# exposed: whether the property gets returned to the user or not, default to true
# trigger types: before_create_trigger|after_create_trigger|before_update_trigger|after_update_trigger|on_read_trigger, one property can have none (default) or more than one triggers

# Entity creation via http POST request, either standalone or derived:
# - Use `generated: true` to mark a property as to be auto generated by the program instead of from user input JSON
# - If a property is marked as `generated: true`, either no trigger method needed (E.g. Donor.image_files) or a `before_create_trigger` can be used to generate the value
# - If a property has `before_create_trigger`, it can't be specified in client request JSON
# - If a property is mraked as `generated: true`, it can't be `required_on_create: true` at the same time
# - Use `required_on_create: true` to mark a property as required from user input
# - If a property is marked as `required_on_create: true`, it can't be `generated: true` and must not have trigger at the same time
# - If a property is marked as `generated: true`, user can't specify this property in request JSON since it'll be auto generated with or without using other fields

# Entity update via http PUT request:
# - By default, all entity properties as mutable (can be updated directly by users). Use `immutable: true` to mark a property as immutable

# Entity retrival via http GET request:
# - By default, all entity properties will be returned. Use `exposed: false` to filter out the property from response
# - If a property has `exposed: false`, it doesn't need any `on_read_trigger` method
# - If a property has `on_read_trigger`, it must be `transient: true`, meaning it's not stored in neo4j and only available during response
# - If a property is `transient: true`, it can have `on_read_trigger` or not have one (when `exposed: false`)


############################################# Schema #############################################
# Shared properties across ACTIVITIES and ENTITIES
shared_properties: &shared_properties
  ###### Creation info properties ######
  created_timestamp:
    type: integer
    generated: true # Disallow user input from request json when being created
    immutable: true # Disallow update of this property when the entity is being updated
    description: "The timestamp of when the node was created.  The format is an integer representing milliseconds since midnight Jan 1, 1970"
    before_create_trigger: set_timestamp
  created_by_user_displayname:
    type: string
    generated: true
    immutable: true
    description: "The name of the person or process authenticated when creating the object"
    before_create_trigger: set_user_displayname
  created_by_user_email:
    type: string
    generated: true
    immutable: true
    description: "The email address of the person or process authenticated when creating the object."
    before_create_trigger: set_user_email
  created_by_user_sub:
    type: string
    generated: true
    immutable: true
    description: "The subject id as provided by the authorization mechanism for the person or process authenticated when creating the object."
    before_create_trigger: set_user_sub
  ###### ID properties ######
  uuid:
    type: string
    generated: true
    immutable: true
    description: "The HuBMAP unique identifier, intended for internal software use only.  This is a 32 digit hexadecimal uuid e.g. 461bbfdc353a2673e381f632510b0f17"
    before_create_trigger: set_uuid
  hubmap_id:
    type: string
    generated: true
    immutable: true
    description: "E.g., HBM###.XXXX.###.  A HuBMAP specific id "
    before_create_trigger: set_hubmap_id


####################################################################################################
## Activities
####################################################################################################

ACTIVITIES:
  Activity:
    properties:
      <<: *shared_properties
      creation_action:
        type: string
        generated: true
        immutable: true
        description: "The activity that was performed."
        before_create_trigger: set_activity_creation_action


####################################################################################################
## Entities
####################################################################################################

shared_entity_properties: &shared_entity_properties 
  ###### DOI properties ######
  registered_doi:
    type: string
    immutable: true
    description: "The doi of the registered entity. e.g. 10.35079/hbm289.pcbm.487"
  doi_url:
    type: string
    immutable: true
    description: "The url from the doi registry for this entity. e.g. https://doi.org/10.35079/hbm289.pcbm.487"
  ###### Last Modified Properties #######
  last_modified_timestamp:
    type: integer
    generated: true
    description: "The timestamp of when the object was last modified.  The format is an integer representing milliseconds since midnight, Jan 1, 1970"
    before_update_trigger: set_timestamp
  last_modified_user_sub:
    type: string
    generated: true
    description: "The subject id as provided by the authorization mechanism for the person or process authenticated when the object was modified."
    before_update_trigger: set_user_sub
  last_modified_user_email:
    type: string
    generated: true
    description: "The email address of the person or process authenticated when the object was last modified."
    before_update_trigger: set_user_email
  last_modified_user_displayname:
    type: string
    generated: true
    description: "The name of the person or process authenticated when the object was last modified."
    before_update_trigger: set_user_displayname
  ###### All other shared properties ######
  entity_type:
    type: string
    generated: true
    immutable: true
    description: "One of the normalized entity types: Dataset, Collection, Sample, Donor"
    before_create_trigger: set_entity_type 
  # Currently cretors and contacts are only available for public Collections
  creators:
    type: list
    description: "A list of the people who created the entity with full name, email, ORCID iD, institution, etc.. This is analogus to the author list on a publication."
  contacts:
    type: list 
    description: "A list of the people who are the main contacts to get information about the entity."
  # To-DO
  # creator_ids:
  #   type: list
  #   immutable: true
  #   description: "A list of ids (will need to decide on uuid or orcid id) referencing the people who created the entity"
  # contact_ids:
  #   type: list
  #   description: "A list of ids (will need to decide on uuid or orcid id) referencing the people who are the main contacts about this entity"
  

ENTITIES:
  ############################################# Collection #############################################
  Collection:
    # Collection can not be derivation source but not target
    derivation:
      source: false
      target: false
    # Collection doesn't actually need data_access_level property
    properties:
      <<: *shared_properties
      <<: *shared_entity_properties
      title:
        type: string
        required_on_create: true
      has_doi:
        type: boolean
        description: "True if the collection has a doi registered for it, meaning it's a public collection. False otherwise."
      ###### Transient properties ######
      datasets:
        type: list
        transient: true
        generated: true
        description: "The datasets that are contained in the collection."
        on_read_trigger: get_collection_datasets

  ############################################# Dataset #############################################
  Dataset:
    # Dataset can be either derivation source or target
    derivation:
      source: true
      target: true
    properties:
      <<: *shared_properties
      <<: *shared_entity_properties
      antibodies:
        type: list
        description: "A list of antibodies used in the assay that created the dataset"
      description:
        type: string
        description: "Free text description of the dataset"
      # The Dataset.data_access_level is based on Dataset.status and Dataset.contains_human_genetic_sequences
      data_access_level:
        type: string
        generated: true
        description: "One of the values: public, consortium, protected. Only Dataset may have protected value"
        before_create_trigger: set_data_access_level
      # When contains_human_genetic_sequences is true, even if status is 'Published', the data_access_level is still 'protected'
      contains_human_genetic_sequences:
        type: boolean
        required_on_create: true # Only required for create via POST, not update via PUT
        description: "True if the data contains any human genetic sequence information."
      status:
        type: string
        generated: true
        description: "One of: Published|New|QA|Error|Hold|Invalid"
        before_create_trigger: set_dataset_status
        after_update_trigger: update_dataset_and_ancestors_data_access_level
      title:
        type: string
        required_on_create: true # Only required for create via POST, not update via PUT
        description: "The dataset title."
      data_types:
        type: list
        required_on_create: true # Only required for create via POST, not update via PUT
        description: "The data or assay types contained in this dataset as a json array of strings.  Each is an assay code from https://github.com/hubmapconsortium/search-api/blob/devel/src/search-schema/data/definitions/enums/assay_types.yaml."
      collections:
        type: list
        transient: true
        generated: true
        description: "A list of collections that this dataset belongs to. Will be returned in response"
        on_read_trigger: get_dataset_collections
      contributors:
        type: list
        description: "A list of people who contributed to the creation of this dataset.  Returned as an array of contributor where the structure of a contributor is"
      direct_ancestor_uuids:
        required_on_create: true # Only required for create via POST, not update via PUT
        type: list
        transient: true
        exposed: false
        description: "The uuids of source entities from which this new entity is derived.  Used to pass source entity ids in on POST or PUT calls used to create the linkages."
        # Note: link_dataset_to_direct_ancestors() will always delete all the old linkages first
        after_create_trigger: link_dataset_to_direct_ancestors
        after_update_trigger: link_dataset_to_direct_ancestors
      direct_ancestors:
        type: list
        generated: true
        transient: true
        on_read_trigger: get_dataset_direct_ancestors
      published_timestamp:
        type: integer
        immutable: true
        generated: true
        description: "The timestamp of when the dataset was published.  The format is an integer representing milliseconds since midnight, Jan 1, 1970.  Cannot be set directly must be set with the /datasets/<id>/publish method."
      published_user_displayname:
        type: string
        generated: true
        immutable: true
        description: "The name of the authenticated user or process that published the data.  Cannot be set directly must be set with the /datasets/<id>/publish method."
      published_user_sub:
        type: string
        generated: true
        immutable: true
        description: "The subject id as provided by the authorization mechanism for the person or process authenticated when the dataset was publised.  Cannot be set directly must be set with the /datasets/<id>/publish method."
      published_user_email:
        type: string
        generated: true
        immutable: true
        description: "The email address provided by the authorization mechanism for the person or process authenticated when published.  Cannot be set directly must be set with the /datasets/<id>/publish method."
      pipeline_message:
        #todo: where is this attribute sourced from?  Is it stored in the database? <- Not in neo4j
        type: string
      ingest_metadata:
        type: json_string # dict
        description: "The metadata returned from the processing at data submission time."
      local_directory_rel_path:
        # Example: protected/<TMC>/<uuid>
        type: string
        generated: true
        transient: true
        description: "The path on the local file system, relative to the base data directory, where the data is stored."
        on_read_trigger: get_local_directory_rel_path
      run_id:
        type: string
      ingest_id:
        type: string
      # A user who is a member of multiple groups HAS to send in the group_uuid 
      group_uuid:
        type: string
        immutable: true
        description: "The uuid of globus group which the user who created this entity is a member of"
        before_create_trigger: set_group_uuid #method that, if group_uuid is not already set looks for membership in a single "data provider" group and sets to that. Otherwise if not set and no single "provider group" membership throws error
      # Must set in neo4j
      group_name:
        # It's not being mapped in the current version, what to do for the existing entities?
        type: string
        generated: true
        immutable: true
        description: "The displayname of globus group which the user who created this entity is a member of"
        before_create_trigger: set_group_name #same as group_uuid, except set group_name
      previous_version_uuid:
        type: string
        transient: true
        immutable: true
        description: "The uuid of previous version dataset"
        after_create_trigger: link_to_previous_version
        on_read_trigger: get_previous_version_uuid
      next_version_uuid:
        type: string
        generated: true
        transient: true
        immutable: true
        description: "The uuid of next version dataset"
        on_read_trigger: get_next_version_uuid


  ############################################# Donor #############################################
  Donor:
    # Donor can be derivation source but not target
    derivation:
      source: false
      target: true
    properties:
      <<: *shared_properties
      <<: *shared_entity_properties
      description:
        type: string
        description: "Free text description of the donor"
      # A Donor is public only if any dataset below it in the provenance hierarchy is published
      # (i.e. Dataset.status == "Published")
      data_access_level:
        type: string
        generated: true
        description: "One of the values: public, consortium"
        before_create_trigger: set_data_access_level
      image_files:
        # This property has no before_create_trigger method, but will be created via `image_files_to_add` and updated via `image_files_to_delete`
        #todo: migrate to new attribute set as above portal_metadata_upload files
        type: list 
        generated: true # Disallow direct user input from create via POST, but can be used for update via PUT
        description: "List of uploaded image files and descriptions of the files. Stored in db as a stringfied json array."
        # Only file descriptions are allowed to be updated directly using this property
        # Adding or deleting files must via the other two properties
        before_update_trigger: update_file_descriptions
      image_files_to_add:
        type: list 
        transient: true
        exposed: false
        description: 'List of temporary file ids with an optional description. Provide as a json array with an temp_file_id and description attribute for each element like {"files": [{"temp_file_id":"dzevgd6xjs4d5grmcp4n","description":"This is image file one"},{"temp_file_id":"yrahjadfhadf","description":"This is image file two"}]}'
        before_create_trigger: commit_image_files
        before_update_trigger: commit_image_files
      image_files_to_remove:
        # This is only valid on update via a PUT request
        type: list 
        transient: true
        exposed: false
        description: 'List of image files previously uploaded to delete. Provide as a json array of the file_uuids of the file like: ["232934234234234234234270c0ea6c51d604a850558ef2247d0b4", "230948203482234234234a57bfe9c056d08a0f8e6cd612baa3bfa"]'
        before_update_trigger: delete_image_files
      metadata:
        type: json_string # dict
        description: "Donor metadata coded as described here: <get donor metadata doc from Chuck>"
      protocol_url:
        type: string
        required_on_create: true # Only required for create via POST, not update via PUT
        description: "The protocols.io doi url pointing the protocol describing the donor selection, inclusion/exclusion criteria"
      lab_donor_id:
        type: string
        description: "A lab specific identifier for the donor."
      # Will come back from uuid-api together with the uuid and hubmap_id
      submission_id:
        type: string
        immutable: true
        generated: true
        description: "The hubmap internal id with embedded semantic information e.g.: VAN0003. This id is generated at creation time which tracks the lab, donor, organ and sample hierarchy per the following: https://docs.google.com/document/d/1DjHgmqWF1VA5-3mfzLFNfabbzmc8KLSG9xWx1DDLlzo/edit?usp=sharing"
        before_create_trigger: set_submission_id
      # A user who is a member of multiple groups HAS to send in the group_uuid 
      group_uuid:
        type: string
        immutable: true
        description: "The uuid of globus group which the user who created this entity is a member of"
        before_create_trigger: set_group_uuid #method that, if group_uuid is not already set looks for membership in a single "data provider" group and sets to that. Otherwise if not set and no single "provider group" membership throws error.  This field is also used to link (Neo4j relationship) to the correct Lab node on creation.
        # Note: link_dataset_to_direct_ancestors() will always delete all the old linkages first
        after_create_trigger: link_donor_to_lab
      # Must set in neo4j
      group_name:
        type: string
        generated: true
        immutable: true
        description: "The displayname of globus group which the user who created this entity is a member of"
        before_create_trigger: set_group_name
        #todo: map to provenance_group_name in ES - ? In the current version it's not mapped
      portal_metadata_upload_files:
        type: json_string 
        description: "list of relative paths to metadata files"
        #todo: migrate to new attribute (set, maybe) representing a single uploaded sample_metadata.tsv file using the now file upload methods.  Leave this in place for now, but add new attribute(s) to support new methon.  Need to do a design session.
      next_identifier:
        type: string
        immutable: true
        exposed: false
        description: "Internal count of child samples, used for generating the submission id of the children. This field is not exposed via the api."
        #todo: add new yaml attribute, exposed that defaults to true. When false the attribute is not returned in ws response
      label:
        type: string
        description: "Lab provided, de-identified name for the donor"
      open_consent:
        type: boolean
        descrption: "True if the donor was consented to allow public, open access to any data, identified or not, derived from the donor's tissue.  Otherwise false."


  ############################################# Sample #############################################
  Sample:
    # Sample can be either derivation source or target
    derivation:
      source: true
      target: true
    properties:
      <<: *shared_properties
      <<: *shared_entity_properties
      description:
        type: string
        description: "Free text description of the sample"
      # A Sample is public only if any dataset below it in the provenance hierarchy is published
      # (i.e. Dataset.status == "Published")
      data_access_level:
        type: string
        generated: true
        description: "One of the values: public, consortium, protected. Only Dataset may have protected value"
        before_create_trigger: set_data_access_level
      specimen_type:
        type: string
        required_on_create: true # Only required for create via POST, not update via PUT
        description: "A code representing the type of specimen.  Must be one of the codes specified in: https://github.com/hubmapconsortium/search-api/blob/devel/src/search-schema/data/definitions/enums/tissue_sample_types.yaml"
      specimen_type_other:
        type: string
        description: "The user provided sample type if the 'other' sample_type is chosen."
      portal_metadata_upload_files:
        type: json_string
        description: "A list of relative paths to metadata files"
        #todo: migrate to new attribute (set, maybe) representing a single uploaded sample_metadata.tsv file using the now file upload methods.  Leave this in place for now, but add new attribute(s) to support new methon.  Need to do a design session.
      protocol_url:
        type: string
        required_on_create: true
        description: "The protocols.io doi url pointing the protocol under wich the sample was obtained and/or prepared."
      image_file_metadata:
        #todo: migrate to new attribute set as above portal_metadata_upload files
        type: json_string
        description: "A list of uploaded image files and descriptions of the files."
      # A user who is a member of multiple groups HAS to send in the group_uuid 
      group_uuid:
        type: string
        immutable: true
        description: "The uuid of globus group which the user who created this entity is a member of"
        before_create_trigger: set_group_uuid #method that, if group_uuid is not already set looks for membership in a single "data provider" group and sets to that. Otherwise if not set and no single "provider group" membership throws error.  This field is also used to link (Neo4j relationship) to the correct Lab node on creation.
      # Must set in neo4j
      group_name:
        type: string
        generated: true
        immutable: true
        description: "The displayname of globus group which the user who created this entity is a member of"
        before_create_trigger: set_group_name
      # Should be required on create only when specimen_type==organ
      organ:
        type: string
        description: "Organ code specifier, only set if sample_type == organ.  Valid values found in: https://github.com/hubmapconsortium/search-api/blob/devel/src/search-schema/data/definitions/enums/organ_types.yaml"
      organ_other:
        type: string
        description: The organ type provided by the user if "other" organ type is selected
      direct_ancestor_uuid:
        type: string
        required_on_create: true # Creating the hubmap ids via uuid-api requires `parent_ids`
        transient: true
        exposed: false
        description: "The uuid of source entity from which this new entity is derived from. Used on creation or edit to create an action and relationship to the ancestor"
        # Note: link_dataset_to_direct_ancestors() will always delete all the old linkages first
        after_create_trigger: link_sample_to_direct_ancestor
        after_update_trigger: link_sample_to_direct_ancestor
      direct_ancestor:
        type: json_string # dict
        generated: true
        transient: true
        on_read_trigger: get_sample_direct_ancestor
      # No submission_id for Dataset and Collection
      # Only Donor and Sample have this property
      submission_id:
        type: string
        generated: true
        immutable: true
        description: "The hubmap internal id with embedded semantic information e.g.: VAN0003-LK-1-10.  This id is generated at creation time which tracks the lab, donor, organ and sample hierarchy per the following: https://docs.google.com/document/d/1DjHgmqWF1VA5-3mfzLFNfabbzmc8KLSG9xWx1DDLlzo/edit?usp=sharing"
        before_create_trigger: set_submission_id
      lab_tissue_sample_id:
        type: string
        description: "Lab specific id for the sample."
      next_identifier:
        type: string
        immutable: true
        exposed: false # For internal use only
        description: "Internal count of child samples, used for generating the submission id of the children. This field is not exposed via the api."
        #todo: add new yaml attribute, exposed that defaults to true.  When false the attribute is not returned in ws response
      metadata:
        type: json_string
        description: "The sample specific metadata derived from the uploaded sample_metadata.tsv file"
      rui_location:
        type: json_string
        description: "The sample location and orientation in the ancestor organ as specified in the RUI tool."
      visit:
        type: string
        description: "The visit id for the donor/patient when the sample was obtained."
      image_files:
        # This property has no before_create_trigger method, but will be created via `image_files_to_add` and updated via `image_files_to_remove`
        type: list 
        generated: true # Disallow direct user input from create via POST, but can be used for update via PUT
        description: "List of uploaded image files and descriptions of the files. Stored in db as a stringfied json array."
        # Only file descriptions are allowed to be updated directly using this property
        # Adding or deleting files must via the other two properties
        before_update_trigger: update_file_descriptions
      image_files_to_add:
        type: list 
        transient: true
        exposed: false
        description: 'List of temporary file ids with an optional description. Provide as a json array with an temp_file_id and description attribute for each element like {"files": [{"temp_file_id":"dzevgd6xjs4d5grmcp4n","description":"This is image file one"},{"temp_file_id":"yrahjadfhadf","description":"This is image file two"}]}'
        before_create_trigger: commit_image_files
        before_update_trigger: commit_image_files
      image_files_to_remove:
        # This is only valid on update via a PUT request
        type: list 
        transient: true
        exposed: false
        description: 'List of image files previously uploaded to delete. Provide as a json array of the file_uuids of the file like: ["232934234234234234234270c0ea6c51d604a850558ef2247d0b4", "230948203482234234234a57bfe9c056d08a0f8e6cd612baa3bfa"]'
        before_update_trigger: delete_image_files
      metadata_files:
        # This property has no before_create_trigger method, but will be created via `metadata_files_to_add` and updated via `metadata_files_to_remove`
        type: list 
        generated: true # Disallow direct user input from create via POST, but can be used for update via PUT
        description: "List of uploaded image files and descriptions of the files. Stored in db as a stringfied json array."
        # Only file descriptions are allowed to be updated directly using this property
        # Adding or deleting files must via the other two properties
        before_update_trigger: update_file_descriptions
      metadata_files_to_add:
        type: list 
        transient: true
        exposed: false
        description: 'List of temporary file ids with an optional description. Provide as a json array with an temp_file_id and description attribute for each element like {"files": [{"temp_file_id":"dzevgd6xjs4d5grmcp4n","description":"This is image file one"},{"temp_file_id":"yrahjadfhadf","description":"This is image file two"}]}'
        before_create_trigger: commit_metadata_files
        before_update_trigger: commit_metadata_files
      metadata_files_to_remove:
        # This is only valid on update via a PUT request
        type: list 
        transient: true
        exposed: false
        description: 'List of image files previously uploaded to delete. Provide as a json array of the file_uuids of the file like: ["232934234234234234234270c0ea6c51d604a850558ef2247d0b4", "230948203482234234234a57bfe9c056d08a0f8e6cd612baa3bfa"]'
        before_update_trigger: delete_metadata_files

