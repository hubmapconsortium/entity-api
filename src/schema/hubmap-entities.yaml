############################################# Rules #############################################
# - If an attribute has `trigger` metadata, it can't be used in client request JSON
# - By default, the schema treats all entity attributes as optional. Use `required: true` to mark an attribute as required
# - If an attribute is marked as `required: true`, it can't have `trigger` at the same time
# - By default, the schema treats all entity attributes as mutable. Use `immutable: true` to mark an attribute as immutable
# - By default, the schema treats all entity attributes as persistent. Use `transient: true` to mark an attribute as transient
# - If an attribute has `on_read` trigger event, it must be transient, meaning it's only available during response


############################################# Shared #############################################
# Are these doi_attribs only applying to Collection?
# I found some of the items (creators, has_doi) in Collectuon nodes, 
# but not in Dataset/Donor/Sample nodes in the current neo4j - Joe
# Need to add "immutable" field for each attribute - Joe
doi_attribs: &doi_attribs 
  registered_doi:
    type: string
    description: "The doi of the registered entity"
  doi_url:
    type: string
    description: "The url from the doi registry for this entity"
  creator_uuids:
    type: list
    cardinality: ordered-list  #thinking this just gets stored as json encoded text
    description: "An ordered list of uuids referencing the people who created the entity"
  contact_uuids:
    type: list
    cardinality: ordered-list
    description: "An ordered list of the HuBMAP uuids pointing to the people who are the main contacts about this entity"
    trigger:
      events:
        - on_create
        - on_update
      method: fill_contacts
  ###### Transient attributes ######
  creators:
    transient: true
    type: application/json
    description: "An ordered list of the people who created the entity with full name, email, ORCID iD, institution, etc.. This is analogus to the author list on a publication."
    trigger:
      events:
        - on_read
      method: fill_creators
  contacts:
    transient: true
    type: application/json # Will probably just go with "json" - Joe
    description: "An ordered array of the people who are the main contacts to get information about the entity."
    trigger:  #this will add all of the contact information when returned by looping through contact_ids list and calling Person ws
      events:
        - on_read
      method: fill_contacts


# All entities in neo4j have these properties
prov_attribs: &prov_attribs
  created_timestamp:
    transient: true
    type: integer
    immutable: true
    trigger:
      events:
        - on_create
      method: get_current_timestamp
  created_by_user_displayname:
    transient: true
    type: string
    trigger:
      events:
        - on_create
      method: get_user_name
    immutable: true
  created_by_user_email:
    transient: true
    type: string
    trigger:
      events:
        - on_create
      method: get_user_email
    immutable: true
  created_by_user_sub: # I don't fine this in Collection in the current neo4j
    transient: true
    type: string
    trigger:
      events:
        - on_create
      method: get_user_sub
    immutable: true
  last_modified_timestamp:
    transient: true
    type: integer
    trigger:
      events:
        - on_update
      method: get_current_timestamp
  last_modified_user_sub:
    transient: true
    type: string
    trigger:
      events:
        - on_update
      method: get_user_sub
  last_modified_user_email:
    transient: true
    type: string
    trigger:
      events:
        - on_update
      method: get_user_email
  last_modified_user_displayname:
    transient: true
    type: string
    trigger:
      events:
        - on_update
      method: get_user_name


# All entities in neo4j have these properties
# Need to decide on using only one id (either uuid or hubmap_id) for query and update exisiting entity
# Otherwise, we'll need to create two API endpoints - Joe
id_attribs: &id_attribs
  uuid:
    type: string
    trigger:
      events:
        - on_create
      method: get_uuid #id creation method will need to call uuid-api POST, get both uuid and hubmap_id and set both files at once.  It should probably just check to see if the attribute exists in the current record (dict) and return if it exists.
    immutable: true
  doi_suffix_id:
    type: string
    trigger:
      events:
        - on_create # We are not regenerating uuid when updating an existing entity, how to handle such cases? - Joe
      method: get_doi_suffix_id #id creation method will need to call uuid-api POST, get both uuid and hubmap_id and set both files at once.  It should probably just check to see if the attribute exists in the current record (dict) and return if it exists.
    immutable: true
  hubmap_id:
    type: string
    immutable: true
    trigger:
      events:
        - on_create
      method: get_hubmap_id


# All entities in neo4j have these properties
other_shared_attribs: &other_shared_attribs
  entity_type:
    type: string
    immutable: true
    trigger:
      events:
        - on_create
      method: get_entity_type
  description:
    required: true
    type: string
  data_access_level: # Only Dataset can have "protected" value
    type: string
    trigger:
      events:
        - on_create
        - on_update
      method: get_data_access_level


ENTITIES:
  ############################################# Collection #############################################
  Collection:
    attributes:
      <<: *id_attribs
      <<: *prov_attribs
      <<: *doi_attribs
      <<: *other_shared_attribs
      title:
        required: true
        type: string
      has_doi:
        type: boolean
        default_value: false
        description: "True if the entity has a doi registered for it, false otherwise"
      ###### Transient attributes ######
      dataset_uuids:  #used only to pass the reference to linked datasets in on a PUT/POST
        transient: true
        type: hubmap_uuid
        description: "list of dataset uuids that the collection is connected to.  This list is not stored in the database, but used at PUT or POST time to link the Collection to associated Datasets"
        cardinality: list
        transient: true # Never save to databse
        trigger:  #when responding to a GET, include the list of dataset ids
          events:
            - on_read
          method: get_dataset_uuids #retrieves the list of dataset ids from the datasets attribute
      creators:
        transient: true
        type: application/json
        description: "An ordered list of the people who created the entity with full name, email, ORCID iD, institution, etc.. This is analogus to the author list on a publication."
        trigger:  #this will add all of the creator information when returned by looping through creator_ids list and calling Person ws
          events:
            - on_read
          method: fill_creators

  ############################################# Dataset #############################################
  Dataset:
    attributes:
      <<: *id_attribs
      <<: *prov_attribs
      <<: *doi_attribs
      <<: *other_shared_attribs
      # Why not add a property to Dataset and indicate the collections that Dataset belongs to?
      # Then we don't have to maintain the associated Dataset nodes in Collection - Joe
      title:
        required: true
        type: string
      data_types:
        type: string
      # TO-DO
      collection_uuids:
        transient: true
        type: list
        trigger:
          events:
            - on_read
          method: get_collection_uuids
      published_timestamp:
        type: integer
      published_user_displayname:
        type: string
      published_user_sub:
        type: string
      published_user_email:
        type: string
      pipeline_message:
        type: string
      dataset_name:
        type: string
      contains_human_genetic_sequences:
        type: string
      ingest_metadata:
        type: string
      local_directory_rel_path:
        type: string
      status:
        type: string
      run_id:
        type: string
      ingest_id:
        type: string
      local_directory_url_path:
        type: string

  ############################################# Donor #############################################
  Donor:
    attributes:
      <<: *id_attribs
      <<: *prov_attribs
      <<: *doi_attribs
      <<: *other_shared_attribs
      image_file_metadata:
        type: string
      metadata:
        type: string
      protocol_url:
        type: string
      lab_donor_id:
        type: string
      submission_id:
        type: string
      portal_metadata_upload_files:
        type: string
      next_identifier:
        type: string
      label:
        type: string
      protocol_file:
        type: string
      open_consent:
        type: string

  ############################################# Sample #############################################
  Sample:
    attributes:
      <<: *id_attribs
      <<: *prov_attribs
      <<: *doi_attribs
      <<: *other_shared_attribs
      protocol_file:
        type: string
      specimen_type:
        type: string
      portal_metadata_upload_files:
        type: string
      protocol_url:
        type: string
      protocol_info:
        type: string
      image_file_metadata:
        type: string
      sample_count:
        type: string
      organ_other:
        type: string
      submission_id:
        type: string
      organ:
        type: string
      lab_tissue_sample_id:
        type: string
      next_identifier:
        type: string
      metadata:
        type: string
      rui_location:
        type: string
      specimen_type_other:
        type: string
      visit:
        type: string

