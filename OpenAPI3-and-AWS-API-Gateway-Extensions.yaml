openapi: "3.0.1"
info:
  title: "HuBMAP Entity API"
  description: "The HuBMAP Entity API is a standard RESTful web service with create,\
    \ update and read operations for the standard HuBMAP provenance graph entities."
  version: "2.0.23"
servers:
- url: "https://entity.api.hubmapconsortium.org"
paths:
  /collections/{id}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfCollection"
        "400":
          description: "400 response"
          content: {}
        "401":
          description: "401 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
      security:
      - HuBMAP-API-Gateway-Read-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/collections/{id}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/collections/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /doi/redirect/{id}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "400 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
        "307":
          description: "307 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/doi/redirect/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/doi/redirect/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /entities/{param}/revisions:
    get:
      parameters:
      - name: "param"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/entities/{param}/revisions"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.param: "method.request.path.param"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "param"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/entities/{param}/revisions"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.param: "method.request.path.param"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /datasets/{id}/revisions:
    get:
      parameters:
      - name: "include_dataset"
        in: "query"
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MODELe5f447"
        "400":
          description: "400 response"
          content: {}
        "401":
          description: "401 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
        "403":
          description: "403 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/datasets/{id}/revisions"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/datasets/{id}/revisions"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /ancestors/{id}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "400":
          description: "400 response"
          content: {}
        "401":
          description: "401 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
        "403":
          description: "403 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/ancestors/{id}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/ancestors/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /entities/{param}:
    get:
      parameters:
      - name: "param"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/entities/{param}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.param: "method.request.path.param"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    put:
      parameters:
      - name: "param"
        in: "path"
        required: true
        schema:
          type: "string"
      security:
      - HuBMAP-API-Gateway-Read-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "PUT"
        uri: "http://${stageVariables.VPCNLB}/entities/{param}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.param: "method.request.path.param"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    post:
      parameters:
      - name: "param"
        in: "path"
        required: true
        schema:
          type: "string"
      security:
      - HuBMAP-API-Gateway-Create-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "POST"
        uri: "http://${stageVariables.VPCNLB}/entities/{param}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.param: "method.request.path.param"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "param"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/entities/{param}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.param: "method.request.path.param"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /entities/dataset/globus-url/{id}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/entities/{id}/globus-url"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/entities/dataset/globus-url/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /descendants/{id}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "400":
          description: "400 response"
          content: {}
        "401":
          description: "401 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
        "403":
          description: "403 response"
          content: {}
      security:
      - HuBMAP-API-Gateway-Read-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/descendants/{id}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/descendants/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /collections/{id}/add-datasets:
    put:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "400":
          description: "400 response"
          content: {}
        "401":
          description: "401 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
        "403":
          description: "403 response"
          content: {}
      security:
      - HuBMAP-API-Gateway-Data-Admin-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "PUT"
        uri: "http://${stageVariables.VPCNLB}/collections/{id}/add-datasets"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.url}/collections/{id}/add-datasets"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /previous_revisions/{id}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      security:
      - HuBMAP-API-Gateway-Read-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/previous_revisions/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/previous_revisions/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /datasets/prov-info:
    get:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/datasets/prov-info"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      x-amazon-apigateway-integration:
        type: "http"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/datasets/prov-info"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /collection/redirect/{id}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/doi/redirect/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/collection/redirect/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /collections:
    get:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/collections"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /children/{id}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      security:
      - HuBMAP-API-Gateway-Read-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/children/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/children/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /redirect/{id}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/redirect/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/redirect/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /parents/{id}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "400":
          description: "400 response"
          content: {}
        "401":
          description: "401 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
        "403":
          description: "403 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/parents/{id}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/parents/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /entities/multiple-samples/{count}:
    post:
      parameters:
      - name: "count"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfMODEL72cebd"
        "400":
          description: "400 response"
          content: {}
        "401":
          description: "401 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
      security:
      - HuBMAP-API-Gateway-Create-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "POST"
        uri: "http://${stageVariables.VPCNLB}/entities/multiple-samples/{count}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.count: "method.request.path.count"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "count"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/multiple-samples/{count}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.count: "method.request.path.count"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /{proxy+}:
    x-amazon-apigateway-any-method:
      parameters:
      - name: "proxy"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:450834107946:function:HuBMAP-API-Gateway-404/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "210fkp"
        cacheKeyParameters:
        - "method.request.path.proxy"
        contentHandling: "CONVERT_TO_TEXT"
  /entities/{param}/provenance:
    get:
      parameters:
      - name: "param"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/entities/{param}/provenance"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.param: "method.request.path.param"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "param"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/entities/{param}/provenance"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.param: "method.request.path.param"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /next_revisions/{id}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      security:
      - HuBMAP-API-Gateway-Read-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/next_revisions/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/next_revisions/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /datasets/{id}/prov-info:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/datasets/{id}/prov-info"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/datasets/{id}/prov-info"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /:
    get:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    x-amazon-apigateway-any-method:
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:450834107946:function:HuBMAP-API-Gateway-404/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /status:
    get:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/status"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/status"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /datasets/{id}/latest-revision:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
        "400":
          description: "400 response"
          content: {}
        "401":
          description: "401 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
        "403":
          description: "403 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/datasets/{id}/latest-revision"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/datasets/{id}/latest-revision"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /dataset/globus-url/{id}:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/entities/{id}/globus-url"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/dataset/globus-url/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /datasets/{id}/revision:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "400":
          description: "400 response"
          content: {}
        "401":
          description: "401 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
        "403":
          description: "403 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/datasets/{id}/revision"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/datasets/{id}/revision"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /entities/{param}/ancestor-organs:
    get:
      parameters:
      - name: "param"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/entities/{param}/ancestor-organs"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.param: "method.request.path.param"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "param"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/entities/{param}/ancestor-organs"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.param: "method.request.path.param"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /datasets/{id}/retract:
    put:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MODEL3ebf60"
        required: true
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "400":
          description: "400 response"
          content: {}
        "401":
          description: "401 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
        "403":
          description: "403 response"
          content: {}
      security:
      - HuBMAP-API-Gateway-Data-Admin-Group-Authorizer: []
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "PUT"
        uri: "http://${stageVariables.VPCNLB}/datasets/{id}/retract"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/datasets/{id}/retract"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /datasets/{id}/organs:
    get:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/datasets/{id}/organs"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/datasets/{id}/organs"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
  /entity-types:
    get:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "401":
          description: "401 response"
          content: {}
        "500":
          description: "500 response"
          content: {}
        "403":
          description: "403 response"
          content: {}
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "GET"
        uri: "http://${stageVariables.VPCNLB}/entity-types"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
    options:
      x-amazon-apigateway-integration:
        type: "http_proxy"
        connectionId: "${stageVariables.VPCLINK}"
        httpMethod: "OPTIONS"
        uri: "http://${stageVariables.VPCNLB}/entity-types"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
components:
  schemas:
    ArrayOfMODEL72cebd:
      type: "array"
      items:
        type: "object"
        properties:
          hubmap_id:
            type: "string"
          submission_id:
            type: "string"
          uuid:
            type: "string"
    ArrayOfCollection:
      type: "array"
      items:
        $ref: "#/components/schemas/Collection"
    Antibody:
      type: "object"
      properties:
        antibody_name:
          type: "string"
          description: "The name of the antibody."
        channel_id:
          type: "string"
          description: "The assay specific identifier for the channel corresponding\
            \ to the antibody."
        conjugated_cat_number:
          type: "string"
          description: "An antibody may be conjugated to a fluorescent tag or a metal\
            \ tag for detection. Conjugated antibodies may be purchased from commercial\
            \ providers. Blank if not applicable."
        conjugated_tag:
          type: "string"
          description: "An antibody may be conjugated to a fluorescent tag or a metal\
            \ tag for detection. Conjugated antibodies may be purchased from commercial\
            \ providers. Blank if not applicable."
        dilution:
          type: "string"
          description: "The dilition ratio, e.g. 1/200 for the antibody.  Blank if\
            \ not applicable."
        lot_number:
          type: "string"
          description: "The antibody lot number from the vendor."
        rr_id:
          type: "string"
          description: "The unique antibody identifier from the Antibody Registry\
            \ (https://antibodyregistry.org). "
        uniprot_accession_number:
          type: "string"
          description: "The unique identifier for the target protein in the UniProt\
            \ database (https://www.uniprot.org)."
    MODELe5f447:
      type: "object"
      properties:
        dataset_uuid:
          type: "string"
          description: "The uuid of a dataset"
        revision_number:
          type: "integer"
          description: "The number in the revision chain of this dataset where 1 is\
            \ the oldest revision"
          format: "int32"
        dataset:
          $ref: "#/components/schemas/Dataset"
    Dataset:
      type: "object"
      properties:
        created_timestamp:
          type: "integer"
          description: "The timestamp of when the node was created.  The format is\
            \ an integer representing milliseconds since midnight Jan 1, 1970"
          format: "int32"
        created_by_user_displayname:
          type: "string"
          description: "The name of the person or process authenticated when creating\
            \ the object"
        created_by_user_email:
          type: "string"
          description: "The email address of the person or process authenticated when\
            \ creating the object."
        created_by_user_sub:
          type: "string"
          description: "The subject id as provided by the authorization mechanism\
            \ for the person or process authenticated when creating the object."
        uuid:
          type: "string"
          description: "The HuBMAP unique identifier, intended for internal software\
            \ use only.  This is a 32 digit hexadecimal uuid e.g. 461bbfdc353a2673e381f632510b0f17"
        hubmap_id:
          type: "string"
          description: "A HuBMAP Consortium wide unique identifier randomly generated\
            \ in the format HBM###.ABCD.### for every entity."
        last_modified_timestamp:
          type: "integer"
          description: "The timestamp of when the object was last modified.  The format\
            \ is an integer representing milliseconds since midnight, Jan 1, 1970"
          format: "int32"
        last_modified_user_sub:
          type: "string"
          description: "The subject id of the user who last modified the entity as\
            \ provided by the authorization mechanism for the person or process authenticated\
            \ when the object was modified."
        last_modified_user_email:
          type: "string"
          description: "The email address of the person or process which authenticated\
            \ when the object was last modified."
        last_modified_user_displayname:
          type: "string"
          description: "The name of the person or process which authenticated when\
            \ the object was last modified."
        entity_type:
          type: "string"
          description: "One of the normalized entity types: Dataset, Collection, Sample,\
            \ Donor"
        registered_doi:
          type: "string"
          description: "The doi of a the registered entity. e.g. 10.35079/hbm289.pcbm.487.\
            \  This is set during the publication process and currently available\
            \ for certain Collections and Datasets."
        doi_url:
          type: "string"
          description: "The url from the doi registry for this entity. e.g. https://doi.org/10.35079/hbm289.pcbm.487"
        creators:
          type: "array"
          description: "A list of the people who created the entity with full name,\
            \ email, ORCID iD, institution, etc.. This is analogus to the author list\
            \ on a publication."
          items:
            $ref: "#/components/schemas/Person"
        contacts:
          type: "array"
          description: "A list of the people who are the main contacts to get information\
            \ about the entity."
          items:
            $ref: "#/components/schemas/Person"
        antibodies:
          type: "array"
          description: "A list of antibodies used in the assay that created the dataset"
          items:
            $ref: "#/components/schemas/Antibody"
        description:
          type: "string"
          description: "Free text description of the dataset"
        data_access_level:
          type: "string"
          description: "One of the values: public, consortium."
          enum:
          - "public"
          - "consortium"
        contains_human_genetic_sequences:
          type: "boolean"
          description: "True if the data contains any human genetic sequence information.\
            \ Can only be set at CREATE/POST time"
        status:
          type: "string"
          description: "One of: New|Processing|QA|Published|Error|Hold|Invalid"
          enum:
          - "New"
          - "Processing"
          - "QA"
          - "Published"
          - "Error"
          - "Hold"
          - "Invalid"
        title:
          type: "string"
          description: "The dataset title."
        data_types:
          type: "array"
          description: "The data or assay types contained in this dataset as a json\
            \ array of strings.  Each is an assay code from [assay types](https://github.com/hubmapconsortium/search-api/blob/master/src/search-schema/data/definitions/enums/assay_types.yaml)."
          items:
            type: "string"
            enum:
            - "AF"
            - "ATACseq-bulk"
            - "bulk_atacseq"
            - "cell-dive"
            - "CODEX"
            - "codex_cytokit"
            - "DART-FISH"
            - "image_pyramid"
            - "IMC"
            - "3D-IMC"
            - "lc-ms_label-free"
            - "lc-ms_labeled"
            - "lc-ms-ms_label-free"
            - "lc-ms-ms_labeled"
            - "LC-MS-untargeted"
            - "Lightsheet"
            - "MALDI-IMS-neg"
            - "MALDI-IMS-pos"
            - "MxIF"
            - "PAS"
            - "bulk-RNA"
            - "salmon_rnaseq_bulk"
            - "SNAREseq"
            - "sc_atac_seq_snare_lab"
            - "sc_atac_seq_snare"
            - "scRNA-Seq-10x"
            - "salmon_rnaseq_10x"
            - "sc_rna_seq_snare_lab"
            - "salmon_rnaseq_snareseq"
            - "sciATACseq"
            - "sc_atac_seq_sci"
            - "sciRNAseq"
            - "salmon_rnaseq_sciseq"
            - "seqFish"
            - "seqFish_lab_processed"
            - "snATACseq"
            - "sn_atac_seq"
            - "snRNAseq"
            - "salmon_sn_rnaseq_10x"
            - "Slide-seq"
            - "Targeted-Shotgun-LC-MS"
            - "TMT-LC-MS"
            - "WGS"
        collections:
          type: "array"
          description: "A list of collections that this dataset belongs to."
          items:
            $ref: "#/components/schemas/Collection"
        upload:
          type: "array"
          description: "The Data Upload that this dataset is associated with."
          items:
            $ref: "#/components/schemas/Upload"
        contributors:
          type: "array"
          description: "A list of people who contributed to the creation of this dataset.\
            \  Returned as an array of contributor where the structure of a contributor\
            \ is"
          items:
            $ref: "#/components/schemas/Person"
        direct_ancestors:
          type: "array"
          description: "A list of direct parent ancensters (one level above) that\
            \ the Dataset was derived from."
          items:
            anyOf:
            - $ref: "#/components/schemas/Sample"
            - $ref: "#/components/schemas/Dataset"
        published_timestamp:
          type: "integer"
          description: "The timestamp of when the dataset was published.  The format\
            \ is an integer representing milliseconds since midnight, Jan 1, 1970."
          format: "int32"
        published_user_displayname:
          type: "string"
          description: "The name of the authenticated user or process that published\
            \ the data."
        published_user_sub:
          type: "string"
          description: "The subject id for the user who published the data as provided\
            \ by the authorization mechanism for the person or process authenticated\
            \ when the dataset was publised."
        published_user_email:
          type: "string"
          description: "The email address of the user who published the provided by\
            \ the authorization mechanism for the person or process authenticated\
            \ when published."
        ingest_metadata:
          type: "object"
          description: "The metadata returned from the ingest pipeline processing\
            \ at data submission time.  Provided as json."
        local_directory_rel_path:
          type: "string"
          description: "The path on the local HIVE file system, relative to the base\
            \ data directory, where the data is stored."
        group_uuid:
          type: "string"
          description: "The uuid of globus group which the user who created this entity\
            \ is a member of.  This is required on Create/POST if the user creating\
            \ the Donor is a member of more than one write group.  This property cannot\
            \ be set via PUT (only on Create/POST)."
        group_name:
          type: "string"
          description: "The displayname of globus group which the user who created\
            \ this entity is a member of"
        previous_revision_uuid:
          type: "string"
          description: "The uuid of previous revision dataset. Can only be set at\
            \ Create/POST time."
        next_revision_uuid:
          type: "string"
          description: "The uuid of next revision dataset"
        thumbnail_file:
          type: "object"
          description: "The dataset thumbnail file detail. Stored in db as a stringfied\
            \ json, e.g., {\"filename\": \"thumbnail.jpg\", \"file_uuid\": \"c35002f9c3d49f8b77e1e2cd4a01803d\"\
            }"
        thumbnail_file_to_add:
          type: "string"
          description: "Just a temporary file id. Provide as a json object with an\
            \ temp_file_id like {\"temp_file_id\":\"dzevgd6xjs4d5grmcp4n\"}"
          format: "temp_file_id"
        thumbnail_file_to_remove:
          type: "string"
          description: "The thumbnail image file previously uploaded to delete. Provide\
            \ as a string of the file_uuid like: \"c35002f9c3d49f8b77e1e2cd4a01803d\""
          format: "file_uuid"
    Sample:
      type: "object"
      properties:
        created_timestamp:
          type: "integer"
          description: "The timestamp of when the node was created.  The format is\
            \ an integer representing milliseconds since midnight Jan 1, 1970"
          format: "int32"
        created_by_user_displayname:
          type: "string"
          description: "The name of the person or process authenticated when creating\
            \ the object"
        created_by_user_email:
          type: "string"
          description: "The email address of the person or process authenticated when\
            \ creating the object."
        created_by_user_sub:
          type: "string"
          description: "The subject id as provided by the authorization mechanism\
            \ for the person or process authenticated when creating the object."
        uuid:
          type: "string"
          description: "The HuBMAP unique identifier, intended for internal software\
            \ use only.  This is a 32 digit hexadecimal uuid e.g. 461bbfdc353a2673e381f632510b0f17"
        hubmap_id:
          type: "string"
          description: "A HuBMAP Consortium wide unique identifier randomly generated\
            \ in the format HBM###.ABCD.### for every entity."
        last_modified_timestamp:
          type: "integer"
          description: "The timestamp of when the object was last modified.  The format\
            \ is an integer representing milliseconds since midnight, Jan 1, 1970"
          format: "int32"
        last_modified_user_sub:
          type: "string"
          description: "The subject id of the user who last modified the entity as\
            \ provided by the authorization mechanism for the person or process authenticated\
            \ when the object was modified."
        last_modified_user_email:
          type: "string"
          description: "The email address of the person or process which authenticated\
            \ when the object was last modified."
        last_modified_user_displayname:
          type: "string"
          description: "The name of the person or process which authenticated when\
            \ the object was last modified."
        entity_type:
          type: "string"
          description: "One of the normalized entity types: Dataset, Collection, Sample,\
            \ Donor"
        registered_doi:
          type: "string"
          description: "The doi of a the registered entity. e.g. 10.35079/hbm289.pcbm.487.\
            \  This is set during the publication process and currently available\
            \ for certain Collections and Datasets."
        doi_url:
          type: "string"
          description: "The url from the doi registry for this entity. e.g. https://doi.org/10.35079/hbm289.pcbm.487"
        creators:
          type: "array"
          description: "A list of the people who created the entity with full name,\
            \ email, ORCID iD, institution, etc.. This is analogus to the author list\
            \ on a publication."
          items:
            $ref: "#/components/schemas/Person"
        contacts:
          type: "array"
          description: "A list of the people who are the main contacts to get information\
            \ about the entity."
          items:
            $ref: "#/components/schemas/Person"
        description:
          type: "string"
          description: "Free text description of the sample"
        data_access_level:
          type: "string"
          description: "One of the values: public, consortium."
          enum:
          - "consortium"
          - "public"
        specimen_type:
          type: "string"
          description: "A code representing the type of specimen.  Must be one of\
            \ the codes specified in: [tissue sample types](https://github.com/hubmapconsortium/search-api/blob/master/src/search-schema/data/definitions/enums/tissue_sample_types.yaml)"
          enum:
          - "atacseq"
          - "biopsy"
          - "blood"
          - "cell_lysate"
          - "clarity_hydrogel"
          - "codex"
          - "cryosections_curls_from_fresh_frozen_oct"
          - "cryosections_curls_rnalater"
          - "ffpe_block"
          - "ffpe_slide"
          - "fixed_frozen_section_slide"
          - "fixed_tissue_piece"
          - "flash_frozen_liquid_nitrogen"
          - "formalin_fixed_oct_block"
          - "fresh_frozen_oct_block"
          - "fresh_frozen_section_slide"
          - "fresh_frozen_tissue"
          - "fresh_frozen_tissue_section"
          - "fresh_tissue"
          - "frozen_cell_pellet_buffy_coat"
          - "gdna"
          - "module"
          - "nuclei"
          - "nuclei_rnalater"
          - "organ"
          - "organ_piece"
          - "other"
          - "pbmc"
          - "pfa_fixed_frozen_oct_block"
          - "plasma"
          - "protein"
          - "ran_poly_a_enriched"
          - "rna_total"
          - "rnalater_treated_and_stored"
          - "rnaseq"
          - "scatacseq"
          - "scrnaseq"
          - "segment"
          - "seqfish"
          - "sequence_library"
          - "serum"
          - "single_cell_cryopreserved"
          - "snatacseq"
          - "snrnaseq"
          - "tissue_lysate"
          - "wgs"
        specimen_type_other:
          type: "string"
          description: "The user provided sample type if the 'other' sample_type is\
            \ chosen."
        protocol_url:
          type: "string"
          description: "The protocols.io doi url pointing the protocol under wich\
            \ the sample was obtained and/or prepared."
        group_uuid:
          type: "string"
          description: "The uuid of globus group which the user who created this entity\
            \ is a member of.  This is required on Create/POST if the user creating\
            \ the Donor is a member of more than one write group.  This property cannot\
            \ be set via PUT (only on Create/POST)."
        group_name:
          type: "string"
          description: "The displayname of globus group which the user who created\
            \ this entity is a member of"
        organ:
          type: "string"
          description: "Organ code specifier, only set if sample_type == organ.  Valid\
            \ values found in: [organ types](https://github.com/hubmapconsortium/search-api/blob/master/src/search-schema/data/definitions/enums/organ_types.yaml)"
          enum:
          - "AO"
          - "BL"
          - "BD"
          - "BM"
          - "BR"
          - "LF"
          - "RF"
          - "HT"
          - "LB"
          - "LE"
          - "LI"
          - "LK"
          - "LL"
          - "LV"
          - "LY"
          - "LO"
          - "RO"
          - "OT"
          - "PA"
          - "PL"
          - "RB"
          - "RE"
          - "RK"
          - "RL"
          - "SI"
          - "SK"
          - "SP"
          - "ST"
          - "TH"
          - "TR"
          - "UR"
          - "UT"
        organ_other:
          type: "string"
          description: "The organ type provided by the user if \"other\" organ type\
            \ is selected"
        direct_ancestor_uuid:
          type: "string"
          description: "The uuid of source entity from which this new entity is derived\
            \ from. Used on creation or edit to create an action and relationship\
            \ to the ancestor.  The direct ancestor must be a Donor or Sample.  If\
            \ the direct ancestor is a Donor, the sample must be of type organ."
        direct_ancestor:
          type: "object"
          description: "The entitiy directly above this sample in the provenance graph\
            \ (direct parent)."
        submission_id:
          type: "string"
          description: "The hubmap internal id with embedded semantic information\
            \ e.g.: VAN0003-LK-1-10.  This id is generated at creation time which\
            \ tracks the lab, donor, organ and sample hierarchy per the following:\
            \ https://docs.google.com/document/d/1DjHgmqWF1VA5-3mfzLFNfabbzmc8KLSG9xWx1DDLlzo/edit?usp=sharing"
        lab_tissue_sample_id:
          type: "string"
          description: "Lab specific id for the sample."
        metadata:
          $ref: "#/components/schemas/SampleMetadata"
        rui_location:
          type: "object"
          description: "The sample location and orientation in the ancestor organ\
            \ as specified in the RUI tool. Returned as a json object."
        visit:
          type: "string"
          description: "The visit id for the donor/patient when the sample was obtained."
        image_files:
          type: "array"
          description: "List of uploaded image files and descriptions of the files.\
            \ Stored in db as a stringfied json array."
          items:
            $ref: "#/components/schemas/File"
        image_files_to_add:
          type: "array"
          description: "List of temporary file ids with an optional description. Provide\
            \ as a json array with an temp_file_id and description attribute for each\
            \ element like {\"files\": [{\"temp_file_id\":\"dzevgd6xjs4d5grmcp4n\"\
            ,\"description\":\"This is image file one\"},{\"temp_file_id\":\"yrahjadfhadf\"\
            ,\"description\":\"This is image file two\"}]}"
          items:
            type: "string"
            format: "temp_file_id"
        image_files_to_remove:
          type: "array"
          description: "List of image files previously uploaded to delete. Provide\
            \ as a json array of the file_uuids of the file like: [\"232934234234234234234270c0ea6c51d604a850558ef2247d0b4\"\
            , \"230948203482234234234a57bfe9c056d08a0f8e6cd612baa3bfa\"]"
          items:
            type: "string"
            format: "file_uuid"
        metadata_files:
          type: "array"
          description: "List of uploaded image files and descriptions of the files.\
            \ Stored in db as a stringfied json array."
          items:
            $ref: "#/components/schemas/File"
        metadata_files_to_add:
          type: "array"
          description: "List of temporary file ids with an optional description. Provide\
            \ as a json array with an temp_file_id and description attribute for each\
            \ element like {\"files\": [{\"temp_file_id\":\"dzevgd6xjs4d5grmcp4n\"\
            ,\"description\":\"This is image file one\"},{\"temp_file_id\":\"yrahjadfhadf\"\
            ,\"description\":\"This is image file two\"}]}"
          items:
            type: "string"
            format: "temp_file_id"
        metadata_files_to_remove:
          type: "array"
          description: "List of image files previously uploaded to delete. Provide\
            \ as a json array of the file_uuids of the file like: [\"232934234234234234234270c0ea6c51d604a850558ef2247d0b4\"\
            , \"230948203482234234234a57bfe9c056d08a0f8e6cd612baa3bfa\"]"
          items:
            type: "string"
            format: "file_uuid"
    Collection:
      type: "object"
      properties:
        created_timestamp:
          type: "integer"
          description: "The timestamp of when the node was created.  The format is\
            \ an integer representing milliseconds since midnight Jan 1, 1970"
          format: "int32"
        created_by_user_displayname:
          type: "string"
          description: "The name of the person or process authenticated when creating\
            \ the object"
        created_by_user_email:
          type: "string"
          description: "The email address of the person or process authenticated when\
            \ creating the object."
        created_by_user_sub:
          type: "string"
          description: "The subject id as provided by the authorization mechanism\
            \ for the person or process authenticated when creating the object."
        uuid:
          type: "string"
          description: "The HuBMAP unique identifier, intended for internal software\
            \ use only.  This is a 32 digit hexadecimal uuid e.g. 461bbfdc353a2673e381f632510b0f17"
        hubmap_id:
          type: "string"
          description: "A HuBMAP Consortium wide unique identifier randomly generated\
            \ in the format HBM###.ABCD.### for every entity."
        last_modified_timestamp:
          type: "integer"
          description: "The timestamp of when the object was last modified.  The format\
            \ is an integer representing milliseconds since midnight, Jan 1, 1970"
          format: "int32"
        last_modified_user_sub:
          type: "string"
          description: "The subject id of the user who last modified the entity as\
            \ provided by the authorization mechanism for the person or process authenticated\
            \ when the object was modified."
        last_modified_user_email:
          type: "string"
          description: "The email address of the person or process which authenticated\
            \ when the object was last modified."
        last_modified_user_displayname:
          type: "string"
          description: "The name of the person or process which authenticated when\
            \ the object was last modified."
        entity_type:
          type: "string"
          description: "One of the normalized entity types: Dataset, Collection, Sample,\
            \ Donor"
        registered_doi:
          type: "string"
          description: "The doi of a the registered entity. e.g. 10.35079/hbm289.pcbm.487.\
            \  This is set during the publication process and currently available\
            \ for certain Collections and Datasets."
        doi_url:
          type: "string"
          description: "The url from the doi registry for this entity. e.g. https://doi.org/10.35079/hbm289.pcbm.487"
        creators:
          type: "array"
          description: "A list of the people who created the entity with full name,\
            \ email, ORCID iD, institution, etc.. This is analogus to the author list\
            \ on a publication."
          items:
            $ref: "#/components/schemas/Person"
        contacts:
          type: "array"
          description: "A list of the people who are the main contacts to get information\
            \ about the entity."
          items:
            $ref: "#/components/schemas/Person"
        title:
          type: "string"
          description: "The title of the Collection"
        datasets:
          type: "array"
          description: "The datasets that are contained in the Collection."
          items:
            $ref: "#/components/schemas/Dataset"
    MODEL3ebf60:
      type: "object"
      properties:
        retraction_reason:
          type: "string"
          description: "Free text describing why the dataset was retracted"
    Upload:
      type: "object"
      properties:
        created_timestamp:
          type: "integer"
          description: "The timestamp of when the node was created.  The format is\
            \ an integer representing milliseconds since midnight Jan 1, 1970"
          format: "int32"
        created_by_user_displayname:
          type: "string"
          description: "The name of the person or process authenticated when creating\
            \ the object"
        created_by_user_email:
          type: "string"
          description: "The email address of the person or process authenticated when\
            \ creating the object."
        created_by_user_sub:
          type: "string"
          description: "The subject id as provided by the authorization mechanism\
            \ for the person or process authenticated when creating the object."
        uuid:
          type: "string"
          description: "The HuBMAP unique identifier, intended for internal software\
            \ use only.  This is a 32 digit hexadecimal uuid e.g. 461bbfdc353a2673e381f632510b0f17"
        hubmap_id:
          type: "string"
          description: "A HuBMAP Consortium wide unique identifier randomly generated\
            \ in the format HBM###.ABCD.### for every entity."
        last_modified_timestamp:
          type: "integer"
          description: "The timestamp of when the object was last modified.  The format\
            \ is an integer representing milliseconds since midnight, Jan 1, 1970"
          format: "int32"
        last_modified_user_sub:
          type: "string"
          description: "The subject id of the user who last modified the entity as\
            \ provided by the authorization mechanism for the person or process authenticated\
            \ when the object was modified."
        last_modified_user_email:
          type: "string"
          description: "The email address of the person or process which authenticated\
            \ when the object was last modified."
        last_modified_user_displayname:
          type: "string"
          description: "The name of the person or process which authenticated when\
            \ the object was last modified."
        entity_type:
          type: "string"
          description: "One of the normalized entity types: Dataset, Collection, Sample,\
            \ Donor, Upload"
        description:
          type: "string"
          description: "Free text description of the data being submitted."
        title:
          type: "string"
          description: "Title of the datasets, a sentance or less"
        status:
          type: "string"
          description: "One of: New|Valid|Invalid|Error|Submitted"
        validation_message:
          type: "string"
          description: "A message from the validataion tools describing what is invalid\
            \ with the upload."
        group_uuid:
          type: "string"
          description: "The uuid of globus group which the user who created this entity\
            \ is a member of.  This is required on Create/POST if the user creating\
            \ the Donor is a member of more than one write group.  This property cannot\
            \ be set via PUT (only on Create/POST)."
        group_name:
          type: "string"
          description: "The displayname of globus group which the user who created\
            \ this entity is a member of"
        dataset_uuids_to_link:
          type: "array"
          description: "List of datasets to add to the Upload. Provide as a json array\
            \ of the dataset uuids like: [\"232934234234234234234270c0ea6c51d604a850558ef2247d0b4\"\
            , \"230948203482234234234a57bfe9c056d08a0f8e6cd612baa3bfa\"]"
          items:
            type: "string"
        dataset_uuids_to_unlink:
          type: "array"
          description: "List of datasets to remove from a Upload. Provide as a json\
            \ array of the dataset uuids like: [\"232934234234234234234270c0ea6c51d604a850558ef2247d0b4\"\
            , \"230948203482234234234a57bfe9c056d08a0f8e6cd612baa3bfa\"]"
          items:
            type: "string"
        datasets:
          type: "array"
          description: "The datasets that are contained in this Upload."
          items:
            $ref: "#/components/schemas/Dataset"
    SampleMetadata:
      type: "object"
      properties:
        sample_id:
          type: "string"
          description: "The HuBMAP Identifier for the sample."
        vital_state:
          type: "string"
          description: "The vital state of the donor who the tissue sample came from."
          enum:
          - "living"
          - "deceased"
        health_status:
          type: "string"
          description: "Donor from which the tissue sample came from's baseline physical\
            \ condition prior to immediate event leading to organ/tissue acquisition.\
            \ For example, if a relatively healthy patient suffers trauma, and as\
            \ a result of reparative surgery, a tissue sample is collected, the subject\
            \ will be deemed 'relatively healthy'. Likewise, a relatively healthy\
            \ subject may have experienced trauma leading to brain death. As a result\
            \ of organ donation, a sample is collected. In this scenario, the subject\
            \ is deemed 'relatively healthy'."
          enum:
          - "cancer"
          - "relatively healthy"
          - "chronic illness"
        organ_condition:
          type: "string"
          description: "Health status of the organ at the time of tissue sample recovery."
          enum:
          - "healthy"
          - "diseased"
        procedure_date:
          type: "string"
          description: "The date at which the organ from which the tissue sample came\
            \ from was procurred, in the format YYYY-MM-DD"
        perfusion_solution:
          type: "string"
          description: "Health status of the organ at the time of sample recovery."
          enum:
          - "UWS"
          - "HTK"
          - "Belzer MPS/KPS"
          - "Formalin"
          - "Unknown"
          - "None"
        pathologist_report:
          type: "string"
          description: "Further details on organ level QC checks."
        warm_ischemia_time_value:
          type: "integer"
          description: "Time interval between cessation of blood flow and cooling\
            \ to 4C. Blank if not applicable."
          format: "int32"
        warm_ischemia_time_unit:
          type: "string"
          description: "Time units that the warm_ischemia_time_value is reported in.\
            \ Blank if not applicable"
        cold_ischemia_time_value:
          type: "integer"
          description: "Time interval on ice to the start of preservation protocol.\
            \ Blank if not applicable."
          format: "int32"
        cold_ischemia_time_unit:
          type: "string"
          description: "Time units that the cold_ischemia_time_value is reported in.\
            \ Blank if not applicable."
        specimen_preservation_temperature:
          type: "string"
          description: "The temperature of the medium during the preservation process.\
            \ Reported as preservation method, temperature and units, e.g. Freezer\
            \ (-80 Celsius)"
        specimen_quality_criteria:
          type: "string"
          description: "RIN score. e.g. RIN: 8.7"
        specimen_tumor_distance_value:
          type: "string"
          description: "If surgical sample from a tumor biopsy, how far from the tumor\
            \ was the sample obtained from. Typically a number of centimeters. Blank\
            \ if not applicable or unknown."
        specimen_tumor_distance_unit:
          type: "string"
      description: "The sample specific metadata derived from the uploaded sample_metadata.tsv\
        \ file. Returned as a json object."
    Person:
      type: "object"
      properties:
        first_name:
          type: "string"
          description: "The full name of the person."
        last_name:
          type: "string"
          description: "The last name of the person."
        middle_name_or_initial:
          type: "string"
          description: "The middle name or initial of the person."
        orcid_id:
          type: "string"
          description: "The ORCID iD of the person."
        affiliation:
          type: "string"
          description: "The institution that the person is affiliated with."
    File:
      type: "object"
      properties:
        filename:
          type: "string"
          description: "The name of the file."
        description:
          type: "string"
          description: "A description of the file. The Dataset.thumbnail_file does\
            \ not have this file description."
        file_uuid:
          type: "string"
          description: "The HuBMAP unique identifier for the file."
  securitySchemes:
    HuBMAP-API-Gateway-Read-Group-Authorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        type: "token"
        authorizerUri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:450834107946:function:HuBMAP-API-Gateway-Read-Group-Authorizer/invocations"
        authorizerResultTtlInSeconds: 0
    HuBMAP-API-Gateway-Data-Admin-Group-Authorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        type: "token"
        authorizerUri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:450834107946:function:HuBMAP-API-Gateway-Data-Admin-Group-Authorizer/invocations"
        authorizerResultTtlInSeconds: 0
    HuBMAP-API-Gateway-Create-Group-Authorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        type: "token"
        authorizerUri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:450834107946:function:HuBMAP-API-Gateway-Create-Group-Authorizer/invocations"
        authorizerResultTtlInSeconds: 0
x-amazon-apigateway-gateway-responses:
  RESOURCE_NOT_FOUND:
    statusCode: 404
    responseTemplates:
      application/json: "{\"message\":$context.error.messageString}"
  ACCESS_DENIED:
    statusCode: 403
    responseTemplates:
      application/json: "{\n  \"message\": \"$context.error.message\",\n  \"hint\"\
        : \"$context.authorizer.key\",\n  \"http_method\": \"$context.httpMethod\"\
        \n}"
  UNAUTHORIZED:
    statusCode: 401
    responseTemplates:
      application/json: "{\n  \"message\": \"$context.error.message\",\n  \"hint\"\
        : \"$context.authorizer.key\",\n  \"http_method\": \"$context.httpMethod\"\
        \n}"
